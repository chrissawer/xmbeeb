   10 osnewl=&FFE7
   20 oswrch=&FFEE
   30 osbyte=&FFF4
   40 tmp=&80:csum=&81
   50 memptrL=&82:memptrH=&83
   60 SOH=&1:EOT=&4
   70 ACK=&6:NAK=&15
   80 FOR pass%=0 TO 3 STEP 3
   90 P%=&3000
  100 [
  110 OPT pass%
  120 LDA #&1F:STA memptrH:LDA #&80:STA memptrL \ &2000-&80
  130 LDA #7:LDX #7:JSR osbyte \ 9600 receive
  140 LDA #8:LDX #7:JSR osbyte \ 9600 transmit
  150 LDA #2:LDX #2:JSR osbyte \ enable RS423 input
  160 LDA #&15:LDX #1:JSR osbyte \ flush RS423 input
  170 LDA #NAK:JSR sendByte
  180 .startBlock
  190 JSR readByte:CPY #EOT:BEQ gotEot
  200 CPY #SOH:BNE fail
  210 JSR readByte:STY tmp
  220 JSR readByte:TYA:CLC:ADC tmp
  230 CMP #&FF:BNE fail
  240 CLC:LDA memptrL:ADC #&80:STA memptrL
  250 LDA memptrH:ADC #0:STA memptrH
  260 LDY #0:STY csum
  270 .loop
  280 TYA:PHA
  290  JSR readByte
  300  TYA:TAX:CLC:ADC csum:STA csum
  310 PLA:TAY
  320 TXA:STA (memptrL),Y
  330 INY:CPY #128
  340 BNE loop
  350 JSR readByte:CPY csum:BNE fail
  360 LDA #ACK:JSR sendByte
  370 LDA #ASC("B"):JSR oswrch
  380 JMP startBlock
  390 RTS
  400 .sendByte
  410 PHA
  420  LDA #3:LDX #3:JSR osbyte \ enable RS423 output
  430 PLA:JSR oswrch
  440 LDA #3:LDX #0:JSR osbyte \ enable screen output
  450 RTS
  460 .readByte \ blocks, returns byte in Y
  470 LDA #&91:LDX #1:JSR osbyte
  480 BCS readByte
  490 RTS
  500 .fail
  510 LDA #ASC("X"):JSR oswrch
  520 RTS
  530 .gotEot
  540 LDA #ACK:JSR sendByte
  550 RTS
  560 ]
  570 NEXT
